type: object
description: |
  Base product data
properties:
  abbreviated_product_name:
    type: string
    description: Abbreviated name in requested language
  code:
    type: string
    description: |
      barcode of the product (can be EAN-13 or internal codes for some food stores),
      for products without a barcode,
      Open Food Facts assigns a number starting with the 200 reserved prefix
  codes_tags:
    type: array
    items:
      type: string
      description: |
        A value which is the type of barcode "code-13" or "code-8"
        and
        A series of mask for the barcode
        It helps retrieve barcodes starting by
      example:
        ["code-13","3017620422xxx","301762042xxxx","30176204xxxxx","3017620xxxxxx","301762xxxxxxx","30176xxxxxxxx","3017xxxxxxxxx","301xxxxxxxxxx","30xxxxxxxxxxx","3xxxxxxxxxxxx"]
  created_t:
    type: integer
    description: |
      Date when the product was added (UNIX timestamp format).
      See also `entry_dates_tags`
    example:
      1457680652
  creator:
    type: string
    description: |
      The contributor who added the product first.
  generic_name:
    type: string
    description: |
      Legal name of the product as regulated
      by the European authorities.
  id:
    description: alias of `code`
    type: string
  lc:
    type: string
    description: |
      Main language of the product.
  lang:
    type: string
    description: |
      **TODO** explain difference with `lc`
  nova_group:
    type: integer
    description:
      Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
  nova_groups:
    type: string

patternProperties:
  abbreviated_product_name_(?<language_code>\w\w):
    type: string
    description: Abbreviated name in language `language_code`.
  'generic_name_(?<language_code>\w\w)':
    type: string
    description: |
      This can be returned in many other languages
      like generic_name_fr (for french).